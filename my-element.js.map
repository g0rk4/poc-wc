{"version":3,"file":"my-element.js","sourceRoot":"","sources":["src/my-element.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;GAKG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAUE;;WAEG;QAEH,UAAK,GAAG,IAAI,CAAC;QAGb,UAAK,GAAG,SAAS,CAAC;QAElB;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;IAiBZ,CAAC;IAfC,MAAM;QACJ,OAAO,IAAI,CAAA;kCACmB,IAAI,CAAC,aAAa,YAAY,IAAI,CAAC,KAAK;;KAErE,CAAC;IACJ,CAAC;IAEO,aAAa,CAAC,KAAU;QAC9B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAEO,YAAY,CAAC,OAAe;IAEpC,CAAC;CACF,CAAA;AAvCQ,gBAAM,GAAG,GAAG,CAAA;;;;;;;GAOlB,CAAC;AAMF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACZ;AAGb;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACP;AAMlB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACf;AAvBC,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAwCrB;SAxCY,SAAS","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n    }\n  `;\n\n  /**\n   * The name to say \"Hello\" to.\n   */\n  @property({type: String})\n  input = null;\n\n  @property({type: String})\n  token = undefined;\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({type: Number})\n  count = 0;\n\n  render() {\n    return html`\n      <input type=\"text\" @input=${this.onInputChange} .value=\"${this.input}\">\n      <slot></slot>\n    `;\n  }\n\n  private onInputChange(event: any): void {\n    console.log('EVENT: ', event.target.value);\n    this.getLibraries(event.target.value);\n  }\n\n  private getLibraries(libName: string) {\n    \n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-element': MyElement;\n  }\n}\n"]}